// Teste simples e r√°pido das melhorias
console.log('üß™ TESTANDO MELHORIAS ARQUITETURAIS DO BRIMU\n');

async function runTests() {
  let passed = 0;
  let failed = 0;

  function test(name, testFn) {
    try {
      testFn();
      console.log(`‚úÖ ${name}`);
      passed++;
    } catch (error) {
      console.log(`‚ùå ${name}: ${error.message}`);
      failed++;
    }
  }

  // 1. Teste TypeScript Compilation
  console.log('üìù 1. TYPESCRIPT COMPILATION');
  const fs = require('fs');
  test('TypeScript compilado com sucesso', () => {
    if (!fs.existsSync('dist')) throw new Error('Pasta dist n√£o encontrada');
    if (!fs.existsSync('dist/schemas')) throw new Error('Schemas n√£o compilados');
    if (!fs.existsSync('dist/logging')) throw new Error('Logging n√£o compilado');
    if (!fs.existsSync('dist/cache')) throw new Error('Cache n√£o compilado');
  });

  // 2. Teste de Validadores
  console.log('\nüîç 2. VALIDADORES JOI');
  const { userRegisterSchema } = require('./dist/schemas/user');
  const { equipmentCreateSchema } = require('./dist/schemas/equipment');

  test('Valida√ß√£o de usu√°rio v√°lido', () => {
    const { error } = userRegisterSchema.validate({
      name: 'Jo√£o Silva',
      email: 'joao@example.com',
      password: 'Password123'
    });
    if (error) throw new Error('Valida√ß√£o deveria passar');
  });

  test('Rejei√ß√£o de email inv√°lido', () => {
    const { error } = userRegisterSchema.validate({
      name: 'Jo√£o Silva',
      email: 'email-inv√°lido',
      password: 'Password123'
    });
    if (!error) throw new Error('Valida√ß√£o deveria falhar');
  });

  test('Valida√ß√£o de equipamento v√°lido', () => {
    const { error } = equipmentCreateSchema.validate({
      name: 'Motosserra',
      type: 'Ferramenta',
      status: 'available'
    });
    if (error) throw new Error('Valida√ß√£o deveria passar');
  });

  // 3. Teste de Logger
  console.log('\nü™µ 3. SISTEMA DE LOGGING');
  const logger = require('./dist/logging/logger').default;

  test('Logger instancia corretamente', () => {
    if (!logger) throw new Error('Logger n√£o inicializado');
    if (typeof logger.info !== 'function') throw new Error('M√©todo info n√£o dispon√≠vel');
  });

  test('Logger cria arquivos de log', () => {
    if (!fs.existsSync('logs')) throw new Error('Pasta logs n√£o criada');
    logger.info('Teste de log durante valida√ß√£o');
  });

  // 4. Teste de Cache
  console.log('\nüíæ 4. SISTEMA DE CACHE');
  const cache = require('./dist/cache/redisClient').default;

  test('Cache instancia corretamente', () => {
    if (!cache) throw new Error('Cache n√£o inicializado');
    if (typeof cache.set !== 'function') throw new Error('M√©todo set n√£o dispon√≠vel');
  });

  test('Cache conecta (Redis ou Memory)', async () => {
    await cache.connect();
    const stats = cache.getStats();
    if (typeof stats.isConnected !== 'boolean') throw new Error('Stats inv√°lidas');
  });

  test('Cache SET/GET funciona', async () => {
    await cache.set('test', 'valor', 10);
    const value = await cache.get('test');
    if (value !== 'valor') throw new Error('Cache SET/GET n√£o funcionou');
  });

  // 5. Teste de Health Checks
  console.log('\nüè• 5. HEALTH CHECKS');
  const healthMonitor = require('./dist/monitoring/healthCheck').default;

  test('HealthMonitor instancia corretamente', () => {
    if (!healthMonitor) throw new Error('HealthMonitor n√£o inicializado');
    if (typeof healthMonitor.checkHealth !== 'function') throw new Error('M√©todo checkHealth n√£o dispon√≠vel');
  });

  // 6. Teste de Middlewares
  console.log('\nüîß 6. MIDDLEWARES');
  const { validate } = require('./dist/validators');

  test('Middleware de valida√ß√£o instancia', () => {
    if (typeof validate !== 'function') throw new Error('Middleware validate n√£o √© fun√ß√£o');
    const middleware = validate(userRegisterSchema);
    if (typeof middleware !== 'function') throw new Error('Middleware n√£o retorna fun√ß√£o');
  });

  // Cleanup
  await cache.disconnect();

  // Resultados finais
  console.log('\nüìä RESULTADOS FINAIS:');
  console.log(`‚úÖ Testes passaram: ${passed}`);
  console.log(`‚ùå Testes falharam: ${failed}`);
  console.log(`üìà Taxa de sucesso: ${Math.round((passed / (passed + failed)) * 100)}%`);

  if (failed === 0) {
    console.log('\nüéâ TODAS AS MELHORIAS FUNCIONANDO PERFEITAMENTE!');
    console.log('\nüöÄ SISTEMA PRONTO PARA PRODU√á√ÉO:');
    console.log('   ‚úÖ TypeScript configurado');
    console.log('   ‚úÖ Valida√ß√£o Joi implementada');
    console.log('   ‚úÖ Logging Winston ativo');
    console.log('   ‚úÖ Cache Redis funcionando');
    console.log('   ‚úÖ Health checks dispon√≠veis');
    console.log('   ‚úÖ Middlewares configurados');
  } else {
    console.log('\n‚ö†Ô∏è  ALGUMAS MELHORIAS PRECISAM DE AJUSTES');
  }

  return failed === 0;
}

runTests().then(success => {
  process.exit(success ? 0 : 1);
}).catch(error => {
  console.error('‚ùå Erro durante execu√ß√£o dos testes:', error);
  process.exit(1);
});