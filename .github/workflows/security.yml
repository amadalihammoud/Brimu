name: Security Scanning

on:
  schedule:
    - cron: '0 6 * * 1'  # Run every Monday at 6 AM
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Security Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install Backend dependencies
      working-directory: ./Backend
      run: npm ci

    - name: Install Frontend dependencies
      working-directory: ./Frontend
      run: npm ci

    - name: Run npm audit for Backend
      working-directory: ./Backend
      run: |
        npm audit --audit-level high --json > backend-audit.json || true
        npm audit --audit-level high

    - name: Run npm audit for Frontend
      working-directory: ./Frontend
      run: |
        npm audit --audit-level high --json > frontend-audit.json || true
        npm audit --audit-level high

    - name: Upload audit results
      uses: actions/upload-artifact@v4
      with:
        name: audit-results
        path: |
          Backend/backend-audit.json
          Frontend/frontend-audit.json

  code-scanning:
    runs-on: ubuntu-latest
    name: Code Security Scanning

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, typescript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  secret-scanning:
    runs-on: ubuntu-latest
    name: Secret Scanning

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  container-scanning:
    runs-on: ubuntu-latest
    name: Container Security Scanning
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image for Backend
      run: |
        cat > Backend/Dockerfile << 'EOF'
        FROM node:18-alpine
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci --only=production
        COPY . .
        RUN npm run build
        EXPOSE 5000
        CMD ["npm", "start"]
        EOF

    - name: Build Docker image for Frontend
      run: |
        cat > Frontend/Dockerfile << 'EOF'
        FROM node:18-alpine as build
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci
        COPY . .
        RUN npm run build
        
        FROM nginx:alpine
        COPY --from=build /app/dist /usr/share/nginx/html
        EXPOSE 80
        CMD ["nginx", "-g", "daemon off;"]
        EOF

    - name: Build backend image
      run: docker build -t brimu-backend ./Backend

    - name: Build frontend image
      run: docker build -t brimu-frontend ./Frontend

    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'brimu-backend'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'

    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'brimu-frontend'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: |
          trivy-backend-results.sarif
          trivy-frontend-results.sarif

  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-check, code-scanning, secret-scanning, container-scanning]
    if: always()
    name: Security Report

    steps:
    - name: Create security report
      run: |
        echo "# ðŸ”’ Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## Scan Results" >> security-report.md
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-report.md
        echo "- Code Scanning: ${{ needs.code-scanning.result }}" >> security-report.md
        echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> security-report.md
        echo "- Container Scanning: ${{ needs.container-scanning.result }}" >> security-report.md
        echo "" >> security-report.md
        echo "Please check the Security tab for detailed results." >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md

    - name: Notify security team
      if: contains(needs.*.result, 'failure')
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'ðŸš¨ Security scan detected issues in Brimu project!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}