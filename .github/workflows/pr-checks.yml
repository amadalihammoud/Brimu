name: üîç Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality & Security
  quality-checks:
    name: üîç Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necess√°rio para an√°lise de diff

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # An√°lise de Depend√™ncias Vulner√°veis
      - name: üîí Check for Vulnerable Dependencies
        run: |
          echo "üîç Checking Backend dependencies..."
          cd Backend && npm audit --audit-level=high --production
          
          echo "üîç Checking Frontend dependencies..."
          cd ../Frontend && npm audit --audit-level=high --production
          
          echo "üîç Checking Website dependencies..."
          cd ../website && npm audit --audit-level=high --production
        continue-on-error: true

      # Verificar Secrets Expostos
      - name: üïµÔ∏è Check for Exposed Secrets
        run: |
          echo "üîç Scanning for exposed secrets..."
          
          # Verificar se h√° secrets hardcoded
          if grep -r "password\|secret\|key\|token" --include="*.js" --include="*.ts" --include="*.json" . | grep -v node_modules | grep -v ".git" | grep -E "(=|:)\s*[\"'][^\"']*[\"']"; then
            echo "‚ö†Ô∏è Poss√≠veis secrets encontrados no c√≥digo!"
            echo "Por favor, use vari√°veis de ambiente para valores sens√≠veis."
            exit 1
          else
            echo "‚úÖ Nenhum secret exposto encontrado."
          fi

      # Verificar Tamanho dos Arquivos
      - name: üìè Check File Sizes
        run: |
          echo "üìè Verificando tamanhos de arquivo..."
          
          # Encontrar arquivos grandes (>1MB)
          large_files=$(find . -type f -size +1M -not -path "./node_modules/*" -not -path "./.git/*")
          
          if [ ! -z "$large_files" ]; then
            echo "‚ö†Ô∏è Arquivos grandes encontrados:"
            echo "$large_files"
            echo "Considere otimizar ou usar Git LFS para arquivos bin√°rios grandes."
          else
            echo "‚úÖ Nenhum arquivo excessivamente grande encontrado."
          fi

  # Job 2: An√°lise de C√≥digo
  code-analysis:
    name: üìä Code Analysis
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Backend Analysis
      - name: üì¶ Install Backend Dependencies
        working-directory: ./Backend
        run: npm ci

      - name: üîê Setup Test Environment
        working-directory: ./Backend
        run: |
          echo "JWT_SECRET=test-jwt-secret-for-pr-checks-super-long-key" > .env.test
          echo "MONGODB_URI=mongodb://root:password@localhost:27017/brimu_test?authSource=admin" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: üèóÔ∏è Build Backend
        working-directory: ./Backend
        run: npm run build

      - name: üß™ Run Backend Tests with Coverage
        working-directory: ./Backend
        run: npm test -- --coverage --coverageReporters=lcov
        env:
          NODE_ENV: test

      - name: üìä Upload Backend Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./Backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

      # Frontend Analysis
      - name: üì¶ Install Frontend Dependencies
        working-directory: ./Frontend
        run: npm ci

      - name: üèóÔ∏è Build Frontend
        working-directory: ./Frontend
        run: npm run build

      - name: üß™ Run Frontend Tests with Coverage
        working-directory: ./Frontend
        run: npm test -- --coverage --coverageReporters=lcov --watchAll=false
        env:
          CI: true

      - name: üìä Upload Frontend Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./Frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      # Website Analysis
      - name: üì¶ Install Website Dependencies
        working-directory: ./website
        run: npm ci

      - name: üèóÔ∏è Build Website
        working-directory: ./website
        run: npm run build

  # Job 3: Performance Analysis
  performance-check:
    name: ‚ö° Performance Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # An√°lise de Bundle Size
      - name: üì¶ Bundle Size Analysis
        run: |
          echo "üì¶ Analisando tamanho dos bundles..."
          
          # Frontend Bundle
          cd Frontend
          npm ci
          npm run build
          
          # Verificar tamanho do bundle
          bundle_size=$(du -sh dist/ | cut -f1)
          echo "Frontend bundle size: $bundle_size"
          
          # Website Bundle
          cd ../website
          npm ci
          npm run build
          
          # Verificar tamanho do bundle Next.js
          if [ -d ".next" ]; then
            next_size=$(du -sh .next/ | cut -f1)
            echo "Website bundle size: $next_size"
          fi

      # Verificar Dependencies
      - name: üìä Dependencies Analysis
        run: |
          echo "üìä Analisando depend√™ncias..."
          
          # Backend dependencies
          echo "Backend dependencies:"
          cd Backend && npm ls --depth=0 --production
          
          echo "Frontend dependencies:"
          cd ../Frontend && npm ls --depth=0 --production
          
          echo "Website dependencies:"
          cd ../website && npm ls --depth=0 --production

  # Job 4: Comments & Documentation
  documentation-check:
    name: üìù Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üìù Check README Updates
        run: |
          echo "üìù Verificando se README foi atualizado..."
          
          # Verificar se h√° mudan√ßas significativas que requerem atualiza√ß√£o do README
          significant_changes=$(git diff --name-only origin/main...HEAD | grep -E "(package\.json|\.env\.example|docker|deploy)" || true)
          
          if [ ! -z "$significant_changes" ]; then
            readme_changed=$(git diff --name-only origin/main...HEAD | grep -E "(README|SETUP|GUIDE)" || true)
            
            if [ -z "$readme_changed" ]; then
              echo "‚ö†Ô∏è Mudan√ßas significativas detectadas, considere atualizar a documenta√ß√£o:"
              echo "$significant_changes"
            else
              echo "‚úÖ Documenta√ß√£o parece estar atualizada."
            fi
          fi

      - name: üìã PR Information Summary
        run: |
          echo "## üìã Pull Request Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Checks Performed:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Security scan for vulnerable dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Code quality and linting" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Test coverage analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Bundle size verification" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Documentation consistency" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä PR Stats:" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files changed:** $(git diff --name-only origin/main...HEAD | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commits:** $(git rev-list --count origin/main...HEAD)" >> $GITHUB_STEP_SUMMARY

  # Job 5: Auto-assign reviewers
  assign-reviewers:
    name: üë• Auto-assign Reviewers
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    
    steps:
      - name: üë• Auto-assign reviewers
        uses: actions/github-script@v7
        with:
          script: |
            // Lista de reviewers padr√£o
            const reviewers = ['team-lead', 'senior-dev']; // Substituir por usu√°rios reais
            
            // N√£o atribuir o pr√≥prio autor
            const filteredReviewers = reviewers.filter(reviewer => reviewer !== context.actor);
            
            if (filteredReviewers.length > 0) {
              try {
                await github.rest.pulls.requestReviewers({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  reviewers: filteredReviewers
                });
                console.log(`Reviewers assigned: ${filteredReviewers.join(', ')}`);
              } catch (error) {
                console.log('Could not assign reviewers:', error.message);
              }
            }

      - name: üè∑Ô∏è Auto-add labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = [];
            
            // Determinar labels baseado nos arquivos modificados
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const filenames = files.map(file => file.filename);
            
            if (filenames.some(name => name.startsWith('Backend/'))) {
              labels.push('backend');
            }
            
            if (filenames.some(name => name.startsWith('Frontend/'))) {
              labels.push('frontend');
            }
            
            if (filenames.some(name => name.startsWith('website/'))) {
              labels.push('website');
            }
            
            if (filenames.some(name => name.includes('docker') || name.includes('deploy'))) {
              labels.push('deployment');
            }
            
            if (filenames.some(name => name.includes('test') || name.includes('spec'))) {
              labels.push('tests');
            }
            
            if (filenames.some(name => name.includes('security') || name.includes('auth'))) {
              labels.push('security');
            }
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
              console.log(`Labels added: ${labels.join(', ')}`);
            }